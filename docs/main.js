// Generated by Haxe 4.2.2
(function ($global) { "use strict";
class MainTwo {
	constructor() {
		this.settingCanvas();
	}
	settingCanvas() {
		let arr = [];
		let ids = [];
		let all = window.document.getElementsByClassName("paper-toy-shape");
		let _g = 0;
		let _g1 = all.length;
		while(_g < _g1) {
			let i = _g++;
			let el = all[i];
			console.log("src/MainTwo.hx:41:",el);
			if(el == null) {
				return;
			}
			console.log("src/MainTwo.hx:45:",el.nodeName);
			console.log("src/MainTwo.hx:46:",el.nodeName.toLowerCase());
			if(el.nodeName.toLowerCase() != "canvas") {
				return;
			}
			console.log("src/MainTwo.hx:53:",el.id);
			if(el.id == null) {
				return;
			}
			console.log("src/MainTwo.hx:57:",el.dataset.paperToyShape);
			if(el.dataset.paperToyShape == null) {
				return;
			}
			arr.push({ id : el.id, type : el.dataset.paperToyShape});
			let c = window.document.createElement("canvas");
			c.width = 600;
			c.height = 600;
			c.id = el.id;
			c.className = "paper-toy-shape img-fluid rounded";
			c.dataset.paperToyShape = el.dataset.paperToyShape;
			el.replaceWith(c);
			ids.push(c.id);
		}
		console.log("src/MainTwo.hx:79:",ids);
		console.log("src/MainTwo.hx:80:",arr);
		this.setup2(ids[0]);
		this.setup2(ids[1]);
		this.setup2(ids[2]);
	}
	setup2(id) {
		let canvas = window.document.getElementById(id);
		let cW = canvas.width;
		let cH = canvas.height;
		let scene = new THREE.Scene();
		let fov = 75;
		let aspect = cW / cH;
		let near = 0.1;
		let far = 5;
		let camera = new THREE.PerspectiveCamera(fov,aspect,near,far);
		camera.position.z = 3;
		let renderer = new THREE.WebGLRenderer({ canvas : canvas, antialias : true});
		renderer.setClearColor(new THREE.Color("#CC7FE0"),1);
		let color = 16777215;
		let intensity = 1;
		let light = new THREE.DirectionalLight(color,intensity);
		light.position.set(-1,2,4);
		scene.add(light);
		let type = canvas.dataset.paperToyShape;
		let boxWidth = 2;
		let boxHeight = 2;
		let boxDepth = 1;
		let geometry;
		switch(type) {
		case "cuboid":
			geometry = new THREE.BoxGeometry(boxWidth,boxHeight,boxDepth);
			break;
		case "cylinder":
			geometry = new THREE.CylinderGeometry(1,1,2,60);
			break;
		default:
			geometry = new THREE.BoxGeometry(boxWidth,boxHeight,boxDepth);
			console.log("src/MainTwo.hx:138:","case '" + type + "': trace ('" + type + "');");
		}
		let material = new THREE.MeshLambertMaterial({ color : 16739179});
		let mesh = new THREE.Mesh(geometry,material);
		let edges = new THREE.EdgesGeometry(geometry);
		let line = new THREE.LineSegments(edges,new THREE.LineBasicMaterial({ color : 0, linewidth : 5}));
		let group = new THREE.Group();
		group.add(mesh);
		group.add(line);
		scene.add(group);
		this.update(group,renderer,scene,camera);
		canvas.setAttribute("style","");
	}
	update(group,renderer,scene,camera) {
		let _gthis = this;
		window.requestAnimationFrame(function(time) {
			_gthis.update(group,renderer,scene,camera);
		});
		group.rotation.x += 0.01;
		group.rotation.y += 0.01;
		renderer.render(scene,camera);
	}
	static main() {
		let app = new MainTwo();
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
{
}
MainTwo.main();
})({});

//# sourceMappingURL=main.js.map